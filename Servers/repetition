#include <iostream>
#include <vector>

enum class RepetitionType {
    Rep_ReusePrevious,   // 0
    Rep_Matrix,          // 1
    Rep_UniformX,        // 2
    Rep_UniformY,        // 3
    Rep_VaryingX,        // 4
    Rep_GridVaryingX,    // 5
    Rep_VaryingY,        // 6
    Rep_GridVaryingY,    // 7
    Rep_TiltedMatrix,    // 8
    Rep_Diagonal,        // 9
    Rep_Arbitrary,       // 10
    Rep_GridArbitrary    // 11
};

// Delta 구조체 정의
struct Delta {
    long x;
    long y;
};

// Repetition 구조체 정의
struct Repetition {
    RepetitionType type;
    Ulong dimen;  // 반복 차원 정보
    Ulong xdimen, ydimen;  // Matrix 및 Uniform에서 사용
    long xspace, yspace;   // 공간 오프셋

    std::vector<long> xOffsets;
    std::vector<long> yOffsets;
    std::vector<Delta> deltas;

    Ulong grid = 0;  // Grid 유형에서 사용

    // Matrix 유형에서 사용되는 Delta
    Delta ndelta;
    Delta mdelta;

    // 반복 회수 계산 함수
    Ulong getRepetitionCount() const {
        switch (type) {
            case RepetitionType::Rep_ReusePrevious:
                return 1;  // 이전 반복을 재사용

            case RepetitionType::Rep_Matrix:
                return xdimen * ydimen;

            case RepetitionType::Rep_UniformX:
                return dimen;

            case RepetitionType::Rep_UniformY:
                return dimen;

            case RepetitionType::Rep_VaryingX:
            case RepetitionType::Rep_GridVaryingX:
                return xOffsets.size();

            case RepetitionType::Rep_VaryingY:
            case RepetitionType::Rep_GridVaryingY:
                return yOffsets.size();

            case RepetitionType::Rep_TiltedMatrix:
                return xdimen * ydimen;

            case RepetitionType::Rep_Diagonal:
                return dimen;

            case RepetitionType::Rep_Arbitrary:
            case RepetitionType::Rep_GridArbitrary:
                return deltas.size();

            default:
                throw std::runtime_error("Unknown RepetitionType.");
        }
    }
};

// 반복 및 누적 반복 계산 함수
Ulong calculateTotalRepetitions(const std::vector<Repetition>& repetitions) {
    Ulong totalRepetitions = 0;

    for (const auto& rep : repetitions) {
        Ulong count = rep.getRepetitionCount();
        std::cout << "Repetition Type: " << static_cast<int>(rep.type)
                  << ", Count: " << count << "\n";
        totalRepetitions += count;
    }

    return totalRepetitions;
}

int main() {
    // 다양한 반복 유형 예시
    Repetition matrixRep{RepetitionType::Rep_Matrix, 0, 3, 4};  // 3x4 Matrix
    Repetition uniformXRep{RepetitionType::Rep_UniformX, 5};  // 5번 반복
    Repetition varyingXRep{RepetitionType::Rep_VaryingX, 0, 0, 0, 0, {0, 100, 200}};

    std::vector<Repetition> reps = {matrixRep, uniformXRep, varyingXRep};

    Ulong totalReps = calculateTotalRepetitions(reps);
    std::cout << "Total Repetitions: " << totalReps << "\n";

    return 0;
}
